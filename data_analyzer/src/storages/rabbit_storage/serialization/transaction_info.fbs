namespace TransactionInfo;

table TransactionInfo {
  signature: Signature;
  is_vote: bool;
  slot: uint64;
  transaction: SanitizedTransaction;
  transaction_meta: TransactionStatusMeta;
}

union SanitizedMessage {
  Legacy: LegacyMessage,
  V0: LoadedMessageV0,
}

table SanitizedTransaction {
  message: SanitizedMessage;
  message_hash: [uint8];
  is_simple_vote_tx: bool;
  signatures: [Signature];
}


table LegacyMessage {
  header: MessageHeader;
  account_keys: [Pubkey];
  recent_blockhash: [uint8];
  instructions: [CompiledInstruction];
}

table Signature {
  key: [uint8];
}

table Pubkey {
  key: [uint8];
}

table MessageHeader {
  num_required_signatures: uint8;
  num_readonly_signed_accounts: uint8;
  num_readonly_unsigned_accounts: uint8;
}

table CompiledInstruction {
  program_id_index: uint8;
  accounts: [uint8];
  data: [uint8];
}

table LoadedMessageV0 {
  message: MessageV0;
  loaded_addresses: LoadedAddresses;
}

table MessageV0 {
  header: MessageHeader;
  account_keys: [Pubkey];
  recent_blockhash: [uint8];
  instructions: [CompiledInstruction];
  address_table_lookups: [MessageAddressTableLookup];
}

table MessageAddressTableLookup {
  account_key: Pubkey;
  writable_indexes: [uint8];
  readonly_indexes: [uint8];
}

table LoadedAddresses {
  writable: [Pubkey];
  readonly: [Pubkey];
}


table TransactionStatusMeta {
    status: bool;
    fee: uint64;
    pre_balances: [uint64];
    post_balances: [uint64];
    inner_instructions: [InnerInstructions];
    log_messages: [string];
    pre_token_balances: [TransactionTokenBalance];
    post_token_balances: [TransactionTokenBalance];
    rewards: [Reward];
}

table InnerInstructions {
    index: uint8;
    instructions: [CompiledInstruction];
}


table TransactionTokenBalance {
    account_index: uint8;
    mint: string;
    ui_token_amount: UiTokenAmount;
    owner: string;
    program_id: string;
}

table UiTokenAmount {
    ui_amount: float64;
    decimals: uint8;
    amount: string;
    ui_amount_string: string;
}

enum RewardType: uint8 {
  None,
  Fee,
  Rent,
  Staking,
  Voting,
}

table Reward {
    pubkey: string;
    lamports: int64;
    post_balance: uint64;
    reward_type: RewardType;
    commission: uint8;
}









root_type TransactionInfo;
