// automatically generated by the FlatBuffers compiler, do not modify

#[allow(unused_imports)]
use std::cmp::Ordering;
#[allow(unused_imports)]
use std::mem;

extern crate flatbuffers;
#[allow(unused_imports)]
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod metadata {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum MetadataOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Metadata<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Metadata<'a> {
        type Inner = Metadata<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf, loc },
            }
        }
    }

    impl<'a> Metadata<'a> {
        pub const VT_SLOT: flatbuffers::VOffsetT = 4;
        pub const VT_BLOCKHASH: flatbuffers::VOffsetT = 6;
        pub const VT_REWARDS: flatbuffers::VOffsetT = 8;
        pub const VT_BLOCK_TIME: flatbuffers::VOffsetT = 10;
        pub const VT_BLOCK_HEIGHT: flatbuffers::VOffsetT = 12;

        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Metadata { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args MetadataArgs<'args>,
        ) -> flatbuffers::WIPOffset<Metadata<'bldr>> {
            let mut builder = MetadataBuilder::new(_fbb);
            builder.add_block_height(args.block_height);
            builder.add_block_time(args.block_time);
            builder.add_slot(args.slot);
            if let Some(x) = args.rewards {
                builder.add_rewards(x);
            }
            if let Some(x) = args.blockhash {
                builder.add_blockhash(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn slot(&self) -> u64 {
            self._tab.get::<u64>(Metadata::VT_SLOT, Some(0)).unwrap()
        }
        #[inline]
        pub fn blockhash(&self) -> Option<&'a str> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(Metadata::VT_BLOCKHASH, None)
        }
        #[inline]
        pub fn rewards(&self) -> Option<&'a str> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<&str>>(Metadata::VT_REWARDS, None)
        }
        #[inline]
        pub fn block_time(&self) -> i64 {
            self._tab
                .get::<i64>(Metadata::VT_BLOCK_TIME, Some(0))
                .unwrap()
        }
        #[inline]
        pub fn block_height(&self) -> u64 {
            self._tab
                .get::<u64>(Metadata::VT_BLOCK_HEIGHT, Some(0))
                .unwrap()
        }
    }

    impl flatbuffers::Verifiable for Metadata<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("slot", Self::VT_SLOT, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "blockhash",
                    Self::VT_BLOCKHASH,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "rewards",
                    Self::VT_REWARDS,
                    false,
                )?
                .visit_field::<i64>("block_time", Self::VT_BLOCK_TIME, false)?
                .visit_field::<u64>("block_height", Self::VT_BLOCK_HEIGHT, false)?
                .finish();
            Ok(())
        }
    }
    pub struct MetadataArgs<'a> {
        pub slot: u64,
        pub blockhash: Option<flatbuffers::WIPOffset<&'a str>>,
        pub rewards: Option<flatbuffers::WIPOffset<&'a str>>,
        pub block_time: i64,
        pub block_height: u64,
    }
    impl<'a> Default for MetadataArgs<'a> {
        #[inline]
        fn default() -> Self {
            MetadataArgs {
                slot: 0,
                blockhash: None,
                rewards: None,
                block_time: 0,
                block_height: 0,
            }
        }
    }

    pub struct MetadataBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> MetadataBuilder<'a, 'b> {
        #[inline]
        pub fn add_slot(&mut self, slot: u64) {
            self.fbb_.push_slot::<u64>(Metadata::VT_SLOT, slot, 0);
        }
        #[inline]
        pub fn add_blockhash(&mut self, blockhash: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Metadata::VT_BLOCKHASH, blockhash);
        }
        #[inline]
        pub fn add_rewards(&mut self, rewards: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Metadata::VT_REWARDS, rewards);
        }
        #[inline]
        pub fn add_block_time(&mut self, block_time: i64) {
            self.fbb_
                .push_slot::<i64>(Metadata::VT_BLOCK_TIME, block_time, 0);
        }
        #[inline]
        pub fn add_block_height(&mut self, block_height: u64) {
            self.fbb_
                .push_slot::<u64>(Metadata::VT_BLOCK_HEIGHT, block_height, 0);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MetadataBuilder<'a, 'b> {
            let start = _fbb.start_table();
            MetadataBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Metadata<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl std::fmt::Debug for Metadata<'_> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut ds = f.debug_struct("Metadata");
            ds.field("slot", &self.slot());
            ds.field("blockhash", &self.blockhash());
            ds.field("rewards", &self.rewards());
            ds.field("block_time", &self.block_time());
            ds.field("block_height", &self.block_height());
            ds.finish()
        }
    }
    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_root_as_metadata<'a>(buf: &'a [u8]) -> Metadata<'a> {
        unsafe { flatbuffers::root_unchecked::<Metadata<'a>>(buf) }
    }

    #[inline]
    #[deprecated(since = "2.0.0", note = "Deprecated in favor of `root_as...` methods.")]
    pub fn get_size_prefixed_root_as_metadata<'a>(buf: &'a [u8]) -> Metadata<'a> {
        unsafe { flatbuffers::size_prefixed_root_unchecked::<Metadata<'a>>(buf) }
    }

    #[inline]
    /// Verifies that a buffer of bytes contains a `Metadata`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_metadata_unchecked`.
    pub fn root_as_metadata(buf: &[u8]) -> Result<Metadata, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Metadata>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Metadata` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_metadata_unchecked`.
    pub fn size_prefixed_root_as_metadata(
        buf: &[u8],
    ) -> Result<Metadata, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Metadata>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Metadata` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_metadata_unchecked`.
    pub fn root_as_metadata_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Metadata<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Metadata<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Metadata` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_metadata_unchecked`.
    pub fn size_prefixed_root_as_metadata_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Metadata<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Metadata<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Metadata and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Metadata`.
    pub unsafe fn root_as_metadata_unchecked(buf: &[u8]) -> Metadata {
        flatbuffers::root_unchecked::<Metadata>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Metadata and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Metadata`.
    pub unsafe fn size_prefixed_root_as_metadata_unchecked(buf: &[u8]) -> Metadata {
        flatbuffers::size_prefixed_root_unchecked::<Metadata>(buf)
    }
    #[inline]
    pub fn finish_metadata_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<Metadata<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_metadata_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<Metadata<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod Metadata
